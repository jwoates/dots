# Create a new directory and enter it
# function md() {
#   mkdir -p "$@" && cd "$@"
# }
profit() {
  tiv ~/money.jpeg
}

logx() {
  for FILE in *.log; do cat /dev/null >! $FILE; done
}
splitCsv() {
  HEADER=$(head -1 $1)
    if [ -n "$2" ]; then
      CHUNK=$2
  else
  CHUNK=50000
  fi
    tail -n +2 $1 | split -l $CHUNK - $1_split_
    for i in $1_split_*; do
      echo -e "$HEADER\n$(cat $i)" > $i
    done
}

function dcit {
  docker compose exec -it $1 bash
}

function cls() {
  /usr/bin/osascript -e 'tell application "System Events" to tell process "Terminal" to keystroke "k" using command down'
}

function mk() {
  mkdir $1 && cd $1
}

function aux(){
  echo "Checking for $1 process by name"
    ps aux | grep $1

}
function dead(){
  echo "killing process by id: $1"
    kill -9 $1
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
httpcompression() {
  encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# All the dig info
digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# helpers
function bundlit {
  echo "Install gems to project?";
  select result in yes no cancel
    do
      case $result in
        yes ) bundle install --path vendor/bundle; break;;
    no ) bundle install; break;;
    cancel ) break;;
    esac
      done
}


function unzip {
  echo "unzipping $1";
  tar -zxvf $1
}

function port {
  echo "returning pid of what is running on port: $1";
  lsof -t -i:$1
}

# Docker commands
## Take down all running containers (releative to docker-compose)
dcnix () {
    echo "üíÄ kill containers ..."
    docker-compose kill $1 && docker-compose rm -f $1
}

# Clean up exited containers, networks & volumes
dccl () {
  echo "üßπ Removing exited containers ..."
  docker system prune -f
  echo "Removing unused networks..."
  docker network prune -f
  echo "Removing unused volumes..."
  docker volume prune -f
  echo "... all done."
}

# deletes all docker images on the system
dcnuke () {
  echo "‚ò¢Ô∏è  Removing all images ..."
  docker rmi $(docker images -a -q)
}
