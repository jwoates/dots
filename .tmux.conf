# C-b is not acceptable -- Vim uses it
set-option -g prefix C-a
bind-key C-a last-window

# bind j resize-pane -D 10
# bind k resize-pane -U 10
# bind l resize-pane -L 10
# bind h resize-pane -R 10

# Start numbering at 1
# set -g base-index 1
set-option -g base-index 1
set-option -g pane-base-index 1
set-window-option -g pane-base-index 1

# auto focus
set -g focus-events on

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Allows us to use C-a a <command> to send commands to a TMUX session inside 
# another TMUX session
bind-key a send-prefix

# set bar colors
#set -g status-bg colour235
#setw -g window-status-current-style fg=colour248,bg=colour248hh

setw -g window-status-current-style fg=colour81,bold
setw -g window-status-current-style bg=colour238
# setw -g window-status-current-style attr=bold
# setw -g window-status-current-style format=' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '


# Zoom Pane
bind-key a resize-pane -Z \; choose-tree







# reload config
unbind r
bind-key R source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
# bind r source-file ~/.tmux.conf

# split panes using | and -
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %

######################
### DESIGN CHANGES ###
######################



# vi is good
setw -g mode-keys vi

# mouse behavior
# setw -g mode-mouse on
# set -g mouse-select-pane on
# set -g mouse-resize-pane on

# set-option -g default-terminal screen-256color
# try to fix splits navigation in nvim while in tmux
set-option -g default-terminal xterm-256color
set -g xterm-keys on


bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

# use vim-like keys for splits and windows
bind-key v split-window -h
bind-key s split-window -v
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# smart pane switching with awareness of vim splits
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
bind C-l send-keys 'C-l'

bind-key C-o rotate-window

bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window

bind-key [ copy-mode
bind-key ] paste-buffer
